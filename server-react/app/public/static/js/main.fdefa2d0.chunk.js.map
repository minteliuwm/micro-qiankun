{"version":3,"sources":["../webpack/universalModuleDefinition","public-path.js","components/LibVersion.js","components/HelloModal.js","pages/Home.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["root","factory","exports","module","define","amd","window","__POWERED_BY_QIANKUN__","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__","className","reactVersion","antdVersion","useState","visible","setVisible","useEffect","$a","document","createElement","onclick","console","log","evt","MouseEvent","view","bubbles","cancelable","dispatchEvent","dispatchUIEvent","onClick","onOk","onCancel","title","style","borderColor","RouteExample","basename","to","type","fallback","path","exact","component","Home","About","App","LibVersion","HelloModal","Boolean","location","hostname","match","render","props","container","ReactDOM","querySelector","storeTest","onGlobalStateChange","value","prev","name","setGlobalState","ignore","user","bootstrap","a","mount","unmount","unmountComponentAtNode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdefa2d0.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react16-main\"] = factory();\n\telse\n\t\troot[\"react16-main\"] = factory();\n})(window, function() {\nreturn ","if (window.__POWERED_BY_QIANKUN__) {\n  // eslint-disable-next-line no-undef\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n","import React, { version as reactVersion } from 'react';\nimport { version as antdVersion } from 'antd';\n\nexport default function() {\n  return (\n    <>\n      <h1 className=\"app-title\">React Demo</h1>\n      <p className=\"app-lib\">\n        React version: {reactVersion}, AntD version: {antdVersion}\n      </p>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Button, Modal } from 'antd';\n\nconst dispatchUIEvent = () => {\n  const $a = document.createElement('a');\n  $a.onclick = () => {\n    console.log('log from UIEvent');\n  };\n  const evt = new MouseEvent('click', {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  $a.dispatchEvent(evt);\n};\n\nexport default function() {\n  const [visible, setVisible] = useState(false);\n  useEffect(() => {\n    dispatchUIEvent();\n  }, []);\n  return (\n    <>\n      <Button onClick={() => setVisible(true)}>CLICK ME</Button>\n      <Modal visible={visible} onOk={() => setVisible(false)} onCancel={() => setVisible(false)} title=\"qiankun\">\n        Probably the most complete micro-frontends solution you ever met\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\n\nexport default function() {\n  return (\n    <h2 className=\"app-nav-item\" style={{ borderColor: 'red' }}>\n      Home\n    </h2>\n  );\n}\n","import React from 'react';\n\nexport default function() {\n  return (\n    <h2 className=\"app-nav-item\" style={{ borderColor: 'green' }}>\n      About\n    </h2>\n  );\n}\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport { Divider } from 'antd';\n\nimport 'antd/dist/antd.min.css';\nimport './App.css';\n\nimport LibVersion from './components/LibVersion';\nimport HelloModal from './components/HelloModal';\n\nimport Home from './pages/Home';\nimport About from './pages/About';\n\nconst RouteExample = () => {\n  return (\n    <Router basename={window.__POWERED_BY_QIANKUN__ ? '/react' : '/'}>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <Divider type=\"vertical\" />\n        <Link to=\"/about\">About</Link>\n      </nav>\n      <Suspense fallback={null}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"app-main\">\n      <LibVersion />\n      <HelloModal />\n\n      <Divider />\n\n      <RouteExample />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './public-path';\nimport * as serviceWorker from './serviceWorker';\n\nfunction render(props) {\n  const { container } = props;\n  ReactDOM.render(<App />, container ? container.querySelector('#root') : document.querySelector('#root'));\n}\n\nfunction storeTest(props) {\n  props.onGlobalStateChange((value, prev) => console.log(`[onGlobalStateChange - ${props.name}]:`, value, prev), true);\n  props.setGlobalState({\n    ignore: props.name,\n    user: {\n      name: props.name,\n    },\n  });\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render({});\n}\n\nexport async function bootstrap() {\n  console.log('[react16] react app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log('[react16] props from main framework', props);\n  storeTest(props);\n  render(props);\n}\n\nexport async function unmount(props) {\n  const { container } = props;\n  ReactDOM.unmountComponentAtNode(\n    container\n      ? container.querySelector('#root')\n      : document.querySelector('#root')\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}